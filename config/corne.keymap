/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    combos {
        compatible = "zmk,combos";

        cb_tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };

        cb_del {
            bindings = <&kp DEL>;
            key-positions = <40 43>;
        };

        cb_cntl {
            bindings = <&sk LCTRL>;
            key-positions = <25 26>;
        };

        cb_enter {
            bindings = <&kp ENTER>;
            key-positions = <33 34>;
        };

        cb_gui {
            bindings = <&sk LGUI>;
            key-positions = <27 28>;
        };

        cb_alt {
            bindings = <&sk RALT>;
            key-positions = <31 32>;
        };

        cb_bkspc {
            bindings = <&kp BSPC>;
            key-positions = <10 9>;
        };

        cb_lbkt {
            bindings = <&kp LBKT>;
            layers = <0 1>;
            key-positions = <1 13>;
        };

        cb_lpara {
            bindings = <&kp LPAR>;
            layers = <0 1>;
            key-positions = <2 14>;
        };

        cb_lbrc {
            bindings = <&kp LBRC>;
            layers = <0 1>;
            key-positions = <3 15>;
        };

        cb_rbkt {
            bindings = <&kp RBRC>;
            layers = <0 1>;
            key-positions = <8 20>;
        };

        cb_rpara {
            bindings = <&kp RPAR>;
            layers = <0 1>;
            key-positions = <9 21>;
        };

        cb_rbrc {
            bindings = <&kp RBKT>;
            layers = <0 1>;
            key-positions = <10 22>;
        };

        cb_q {
            bindings = <&kp Q>;
            layers = <0>;
            key-positions = <1 12>;
        };
    };

     keymap {
                compatible = "zmk,keymap";

                base {bindings = <
 &none &none  &kp W  &kp E  &kp R  &kp T         &kp Y      &kp U  &kp I      &kp O    &none &none 
 &none &kp A  &kp S  &kp D  &kp F  &kp G         &kp H      &kp J  &kp K      &kp L    &kp P &none 
 &none &kp Z  &kp X  &kp C  &kp V  &kp B         &kp N      &kp M  &kp COMMA  &kp DOT  &kp SEMI &none 
   &none  &mo 2  &kp SPACE     &kp LSHFT  &mo 1  &none      
                        >;
                };
                _num {bindings = <
 &none &none  &kp N6  &kp N5  &kp N4  &kp ESC     &none   &kp BSLH  &kp STAR   &kp FSLH   &none &none 
 &none &none  &kp N3  &kp N2  &kp N1  &kp N0      &none   &kp SQT   &kp UNDER  &kp MINUS  &none &none 
 &none &none  &kp N9  &kp N8  &kp N7  &kp DOT     &none   &kp DQT   &kp EQUAL  &kp PLUS   &mo 3 &none 
   &none   &trans  &trans      &trans  &trans    &none       
                        >;
                };

                _sym {bindings = <
 &none &none      &kp TILDE  &kp GRAVE  &kp PIPE   &none      &none   &kp PG_UP  &kp UP    &kp PG_DN  &none &none 
 &none &kp EXCL   &kp AT     &kp POUND  &kp DLLR   &none      &none   &kp LEFT   &kp DOWN  &kp RIGHT  &none &none 
 &none &kp QMARK  &kp CARET  &kp AMPS   &kp PRCNT  &none      &none   &kp HOME   &none     &kp END    &none &none 
      &none      &trans     &trans     &trans  &trans     &none    
                        >;
                };

        _fun {
            bindings = <
 &none &none  &kp F6  &kp F5  &kp F4  &kp F11  &none      &none   &none  &none  &none &none 
 &none &none  &kp F3  &kp F2  &kp F1  &kp F10  &none      &none   &none  &none  &none &none 
 &none &none  &kp F9  &kp F8  &kp F7  &kp F12  &none      &none   &none  &none  &none &none 
    &none   &trans  &trans      &trans  &trans  &none   
            >;
        };
        };
};
